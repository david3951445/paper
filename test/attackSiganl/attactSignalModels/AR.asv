clc; clear; close all
rng(0);
n = 1;
n_pre = n+5;
dt = 0.1;
t = 0 : dt : 50;

w = randn(1, length(t));
y = 3*cos(t) + 0.5*w - 0.1*t + 0.01*t.^2;
yh = zeros(1, length(t)); 
yh2 = yh;
yh3 = yh;

y_withInit = [zeros(1, n_pre), y];
% sys = ar(y, n);

for i = 1 : length(t)
    i_y_withInit = i + n_pre;
    y_cur = y_withInit(i_y_withInit-n_pre : i_y_withInit-1);
    y_cur2 = y_withInit(i_y_withInit-1 :-1: i_y_withInit-n);
    %% Base on AR model, using least square solution to obtain coeff.
    % MATLAB ar()
%     sys = ar(y_cur, n);
%     coeff = -sys.A(2 : n+1)';
    % my ar()
    coeff = my_ar(y_cur, n);
    
    % check the error
%     y_withInit(i_y_withInit-n-1 : i_y_withInit-1-1)*coeff - y_withInit(i_y_withInit-1)

    yh(i) = y_cur2*coeff;
    Y{1}(i) = 
    
    %% Base on smooth model, coeff is a geometric sequence.
    coeff2 = 0.98.^(0:n-1)'; coeff2 = coeff2/sum(coeff2);
    yh2(i) = y_cur2*coeff2;
    
    %% polyfit
    % method 1, fit()
    f = fit(t(1:n_pre)', y_cur', 'poly1'); % This function can fit not only poly, but slower.
    d = differentiate(f, t(n_pre));
    
    % method 2, polyfit()
%     p = polyfit(t(1:n_pre), y_cur, 2);   
%     d = polyval(polyder(p), t(n_pre));
        
    yh3(i) = y_withInit(i_y_withInit-1) + dt*d;
    
    %% Taylor Expansion
    d = (y_withInit(i_y_withInit-1) - y_withInit(i_y_withInit-2))/dt;
    yh4(i)
%     log_coeff(:, i) = coeff;
end

Title = {'AR model', 'smooth model', 'polynomial fitting'};
Y = {yh, yh2, yh3};
for i = 1 : 3
e = y - Y{i};
subplot(3, 1, i)
plot(t, e, t, y);
title([Title{i}, ', err = ' num2str(norm(e))])
end